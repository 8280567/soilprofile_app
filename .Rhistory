})
#set dafault values depending of the horizont dimension
y_vals <- reactive({
default_yval(df_global3())
})
shape_mod_print <- reactive({
line1 <- line_mod(df_geom = df_global2(),
line_attri = data.frame(name= seq(pvars()),
numberX = c(5, input$x1)
sd = sd(3, input$sd2),
sm = sm(T, input$sm2)
)
)
line2 <- split_polygon(polygon = df_global3(),
line = line1)
})
print_plot1 <- reactive({
geom_sf(data = shape_mod_print(),
fill = shape_mod_print()$rgb_col
)
})
#rock#######
spoint <- reactive({
req(row_select())
# if(!any(unlist(row_select()))== TRUE)
#   return(NULL)
mat_spoint <- data.frame(
name = c(1,2),
nSides = c(45, 22),
smooth = c(T, F),
union = c(F, F),
phi = c(0,0),
strat = c(F, F),
cellnumber = c(0,0),
rotation = c(0,0)
)
skeleton(shape_mod = df_global3(),
skeleton_mat = mat_spoint
)
})
print_plot3 <- reactive({
#if(is.null(row_select()))
#NULL
#row_select()
row_select <- c(input$r1, input$r2)
data_rock <- data.frame(fill = unlist(rock_col()),
name = df_global3()$name,
selct = unlist(row_select())
) %>%
right_join(spoint(), by = "name") %>%
filter(selct == TRUE)
geom_sf(data = data_rock, fill = data_rock$fill) #rock_col()[row_select])
})
output$plot1 <- renderCachedPlot({
plotInput()
},
cacheKeyExpr = {list(print_plot1()#,
#print_plot3()
# geom_process(),
# spoint(),
# #root(),
# point_shape(),
# #texture_layer(),
# print_plot5(),
# #print_plot6(),
# if(!is.null(texture_layer())){print_plot2()},
# if(!is.null(spoint())){print_plot3()}
# if(!is.null(root())){print_plot4()}#,
# #if(!is.null(print_plot5())){print_plot5()}
)}
)
plotInput = function() {
ggplot() +
print_plot1() +
#print_plot3() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.background = element_blank())
# if(!is.null(print_plot3())){
#   t <-  t + print_plot3()
# }
}
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxInput("sm1", "sm1", value = F)
checkboxInput("r1", "r1", value = T)
checkboxInput("r2", "r2", value = T)
sliderInput("x1", "x1", min = 0, max = 10, value = 1, steps = 1)
sliderInput("sd2", "sd2", min = 0, max = 4, value = .4)
plotOutput('plot1')
)
server <- function(input, output, session) {
df_global1 <- reactive({
df_global_example <-  data.frame(name = c("AhZ", "Bvh", "BvCv"),
depth = c("0-15", "15-43.4", "43.4-70"),
col = c("7.5YR 2/1","10YR 4/3", "2.5Y 5/3"),
skel_dim = c(".1-.8","1-2", "2-3"),
skel_ab = c(0.2, 0.4, .9),
clay = c(1, .8, 0),
silt = c(0, .5, .5),
sand = c(0, .2, .5)) %>%
data_mod()
df_global_example[1:2,]
})
#set coordinates:
df_global2 <- reactive({
cord_setting(df_global1(), plot_width = 3)
})
df_global3 <- reactive({
sf_polygon(df_geom = df_global2(), df_attri = df_global1())
})
#set length of each Input Paramert (number of horizons)
pvars <- reactive({
nrow(df_global3())
})
#set dafault values depending of the horizont dimension
y_vals <- reactive({
default_yval(df_global3())
})
shape_mod_print <- reactive({
line1 <- line_mod(df_geom = df_global2(),
line_attri = data.frame(name= seq(pvars()),
numberX = c(5, input$x1)
sd = sd(3, input$sd2),
sm = sm(T, input$sm2)
)
)
line2 <- split_polygon(polygon = df_global3(),
line = line1)
})
print_plot1 <- reactive({
geom_sf(data = shape_mod_print(),
fill = shape_mod_print()$rgb_col
)
})
#rock#######
spoint <- reactive({
req(row_select())
# if(!any(unlist(row_select()))== TRUE)
#   return(NULL)
mat_spoint <- data.frame(
name = c(1,2),
nSides = c(45, 22),
smooth = c(T, F),
union = c(F, F),
phi = c(0,0),
strat = c(F, F),
cellnumber = c(0,0),
rotation = c(0,0)
)
skeleton(shape_mod = df_global3(),
skeleton_mat = mat_spoint
)
})
print_plot3 <- reactive({
#if(is.null(row_select()))
#NULL
#row_select()
row_select <- c(input$r1, input$r2)
data_rock <- data.frame(fill = unlist(rock_col()),
name = df_global3()$name,
selct = unlist(row_select())
) %>%
right_join(spoint(), by = "name") %>%
filter(selct == TRUE)
geom_sf(data = data_rock, fill = data_rock$fill) #rock_col()[row_select])
})
output$plot1 <- renderCachedPlot({
plotInput()
},
cacheKeyExpr = {list(print_plot1()#,
#print_plot3()
# geom_process(),
# spoint(),
# #root(),
# point_shape(),
# #texture_layer(),
# print_plot5(),
# #print_plot6(),
# if(!is.null(texture_layer())){print_plot2()},
# if(!is.null(spoint())){print_plot3()}
# if(!is.null(root())){print_plot4()}#,
# #if(!is.null(print_plot5())){print_plot5()}
)}
)
plotInput = function() {
ggplot() +
print_plot1() +
#print_plot3() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.background = element_blank())
# if(!is.null(print_plot3())){
#   t <-  t + print_plot3()
# }
}
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxInput("sm1", "sm1", value = F)
checkboxInput("r1", "r1", value = T)
checkboxInput("r2", "r2", value = T)
sliderInput("x1", "x1", min = 0, max = 10, value = 1, steps = 1)
sliderInput("sd2", "sd2", min = 0, max = 4, value = .4)
plotOutput('plot1')
)
server <- function(input, output, session) {
df_global1 <- reactive({
df_global_example <-  data.frame(name = c("AhZ", "Bvh", "BvCv"),
depth = c("0-15", "15-43.4", "43.4-70"),
col = c("7.5YR 2/1","10YR 4/3", "2.5Y 5/3"),
skel_dim = c(".1-.8","1-2", "2-3"),
skel_ab = c(0.2, 0.4, .9),
clay = c(1, .8, 0),
silt = c(0, .5, .5),
sand = c(0, .2, .5)) %>%
data_mod()
df_global_example[1:2,]
})
#set coordinates:
df_global2 <- reactive({
cord_setting(df_global1(), plot_width = 3)
})
df_global3 <- reactive({
sf_polygon(df_geom = df_global2(), df_attri = df_global1())
})
#set length of each Input Paramert (number of horizons)
pvars <- reactive({
nrow(df_global3())
})
#set dafault values depending of the horizont dimension
y_vals <- reactive({
default_yval(df_global3())
})
shape_mod_print <- reactive({
line1 <- line_mod(df_geom = df_global2(),
line_attri = data.frame(name= seq(pvars()),
numberX = c(5, input$x1),
sd = sd(3, input$sd2),
sm = sm(T, input$sm2)
)
)
line2 <- split_polygon(polygon = df_global3(),
line = line1)
})
print_plot1 <- reactive({
geom_sf(data = shape_mod_print(),
fill = shape_mod_print()$rgb_col
)
})
#rock#######
spoint <- reactive({
req(row_select())
# if(!any(unlist(row_select()))== TRUE)
#   return(NULL)
mat_spoint <- data.frame(
name = c(1,2),
nSides = c(45, 22),
smooth = c(T, F),
union = c(F, F),
phi = c(0,0),
strat = c(F, F),
cellnumber = c(0,0),
rotation = c(0,0)
)
skeleton(shape_mod = df_global3(),
skeleton_mat = mat_spoint
)
})
print_plot3 <- reactive({
#if(is.null(row_select()))
#NULL
#row_select()
row_select <- c(input$r1, input$r2)
data_rock <- data.frame(fill = unlist(rock_col()),
name = df_global3()$name,
selct = unlist(row_select())
) %>%
right_join(spoint(), by = "name") %>%
filter(selct == TRUE)
geom_sf(data = data_rock, fill = data_rock$fill) #rock_col()[row_select])
})
output$plot1 <- renderCachedPlot({
plotInput()
},
cacheKeyExpr = {list(print_plot1()#,
#print_plot3()
# geom_process(),
# spoint(),
# #root(),
# point_shape(),
# #texture_layer(),
# print_plot5(),
# #print_plot6(),
# if(!is.null(texture_layer())){print_plot2()},
# if(!is.null(spoint())){print_plot3()}
# if(!is.null(root())){print_plot4()}#,
# #if(!is.null(print_plot5())){print_plot5()}
)}
)
plotInput = function() {
ggplot() +
print_plot1() +
#print_plot3() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.background = element_blank())
# if(!is.null(print_plot3())){
#   t <-  t + print_plot3()
# }
}
}
shinyApp(ui, server)
ui <- fluidPage(
checkboxInput("sm1", "sm1", value = F),
checkboxInput("r1", "r1", value = T),
checkboxInput("r2", "r2", value = T),
sliderInput("x1", "x1", min = 0, max = 10, value = 1, steps = 1),
sliderInput("sd2", "sd2", min = 0, max = 4, value = .4),
plotOutput('plot1')
)
server <- function(input, output, session) {
df_global1 <- reactive({
df_global_example <-  data.frame(name = c("AhZ", "Bvh", "BvCv"),
depth = c("0-15", "15-43.4", "43.4-70"),
col = c("7.5YR 2/1","10YR 4/3", "2.5Y 5/3"),
skel_dim = c(".1-.8","1-2", "2-3"),
skel_ab = c(0.2, 0.4, .9),
clay = c(1, .8, 0),
silt = c(0, .5, .5),
sand = c(0, .2, .5)) %>%
data_mod()
df_global_example[1:2,]
})
#set coordinates:
df_global2 <- reactive({
cord_setting(df_global1(), plot_width = 3)
})
df_global3 <- reactive({
sf_polygon(df_geom = df_global2(), df_attri = df_global1())
})
#set length of each Input Paramert (number of horizons)
pvars <- reactive({
nrow(df_global3())
})
#set dafault values depending of the horizont dimension
y_vals <- reactive({
default_yval(df_global3())
})
shape_mod_print <- reactive({
line1 <- line_mod(df_geom = df_global2(),
line_attri = data.frame(name= seq(pvars()),
numberX = c(5, input$x1),
sd = sd(3, input$sd2),
sm = sm(T, input$sm2)
)
)
line2 <- split_polygon(polygon = df_global3(),
line = line1)
})
print_plot1 <- reactive({
geom_sf(data = shape_mod_print(),
fill = shape_mod_print()$rgb_col
)
})
#rock#######
spoint <- reactive({
req(row_select())
# if(!any(unlist(row_select()))== TRUE)
#   return(NULL)
mat_spoint <- data.frame(
name = c(1,2),
nSides = c(45, 22),
smooth = c(T, F),
union = c(F, F),
phi = c(0,0),
strat = c(F, F),
cellnumber = c(0,0),
rotation = c(0,0)
)
skeleton(shape_mod = df_global3(),
skeleton_mat = mat_spoint
)
})
print_plot3 <- reactive({
#if(is.null(row_select()))
#NULL
#row_select()
row_select <- c(input$r1, input$r2)
data_rock <- data.frame(fill = unlist(rock_col()),
name = df_global3()$name,
selct = unlist(row_select())
) %>%
right_join(spoint(), by = "name") %>%
filter(selct == TRUE)
geom_sf(data = data_rock, fill = data_rock$fill) #rock_col()[row_select])
})
output$plot1 <- renderCachedPlot({
plotInput()
},
cacheKeyExpr = {list(print_plot1()#,
#print_plot3()
# geom_process(),
# spoint(),
# #root(),
# point_shape(),
# #texture_layer(),
# print_plot5(),
# #print_plot6(),
# if(!is.null(texture_layer())){print_plot2()},
# if(!is.null(spoint())){print_plot3()}
# if(!is.null(root())){print_plot4()}#,
# #if(!is.null(print_plot5())){print_plot5()}
)}
)
plotInput = function() {
ggplot() +
print_plot1() +
#print_plot3() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.background = element_blank())
# if(!is.null(print_plot3())){
#   t <-  t + print_plot3()
# }
}
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
remove.packages("ggspatial", lib="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
remotes::install_github("paleolimbot/ggspatial")
remotes::install_github("paleolimbot/ggspatial@v1.0.4")
remotes::install_github("paleolimbot/ggspatial@1.0.4")
remotes::install_github("paleolimbot/ggspatial1.0.4")
library("ggspatial", lib.loc="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
remove.packages("ggspatial", lib="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
install.packages("~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/ggspatial.tar.gz", repos = NULL, type = "source")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(shiny.reactlog=TRUE)
shiny::runApp()
shiny::runApp()
showReactLog()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
erg3 <- geom_sf(data = erg2, fill = erg2$fill)
runApp()
runApp()
runApp()
runApp()
library(soilprofile2)
shiny::runApp()
#shiny::req(input[[paste0(label[pvars])]])
#lapply(seq(pvars), function(i) {req(input[[paste0(label[i])]])})
sapply(seq(pvars),
function(i) {
input[[paste0(label[i])]]
})
runApp()
runApp()
