label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
nummeric(pvars)
numeric(pvars)
rep(3, 5)
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
min = numeric(pvars),
max = rep(3, 5)
...[i]
)
}
})
}
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
min = numeric(pvars)[i],
max = rep(3, 5)[i],
...[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
list() <- ...
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
list(...)[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
list(...)[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
par <- list(...)
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
par[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
eval(substitute(list(...)))[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
eval(substitute(list(...)))[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
eval(substitute(list(...)))[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = value
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = value,
max = max,
min = min
)
}
})
}
runApp()
runApp()
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = value[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = value[i],
max = max[i],
min = min[i]
)
}
})
}
runApp()
runApp()
df_global3$sd
runApp()
runApp()
df_global3$sd
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
step = ...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
step = ...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
df_global3$sd
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i, ...){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
...
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
runApp()
seq(pvars)
renderUI_help_fun <- function(name_par, nameC, nummeric = T, value){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = value[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
runApp()
runApp()
renderUI_help_fun <- function(name_par, nameC, nummeric = T, ...){
lapply(seq(pvars), function(i){
if(nummeric == T){
numericInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i]
)
}else{
sliderInput(inputId = paste0(name_par, nameC[i]),
label = nameC[i],
value = ...[i],
max = ...[i],
min = ...[i]
)
}
})
}
runApp()
df_global3$sd
c(3,3,3,3,3)
c(0,0,0,0,0)
runApp()
runApp()
df_global3$sd
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("r-spatial/mapedit")
library(mapedit)
library(leaflet)
library(mapview)
selectMap(
leaflet(df_global3) %>%
addTiles() %>%
addCircleMarkers(layerId = ~brewery)
)
selectMap(
leaflet(df_global3$geometry) %>%
addTiles() %>%
addCircleMarkers(layerId = ~brewery)
)
borders <- df_global3
new_borders <- mapview(border) %>%
editMap("border")
border <- df_global3
new_borders <- mapview(border) %>%
editMap("border")
runApp()
runApp()
runApp()
runApp()
leafletOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tmap)
install.packages("tmap")
runApp()
library(tmapt)
runApp()
runApp()
remove.packages("mapedit", lib="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
remove.packages("leaflet", lib="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
remove.packages("mapview", lib="~/Dokumente/Uni_Master/Masterarbeit/App/soilprofile/packrat/lib/x86_64-pc-linux-gnu/3.4.4")
remove.packages(c("bitops", "dichromat", "PKI", "RCurl", "rgdal", "rgeos", "RJSONIO", "rsconnect", "tmap", "tmaptools", "XML"))
runApp()
runApp()
body <- dashboardBody(
# tabItems(
#   tabItem(tabName = "readme",
#           withMathJax(),
#           includeMarkdown("readMe.Rmd")
#   ),
tabItem(tabName = "plot",
fluidRow(
column(width = 4,
tabBox(width = NULL,
tabPanel(h5("transition"),
uiOutput("ui_transition")
),
tabPanel(h5("dosage"),
sliderInput("sd", "sd", value=1, min=0, max = 2, step=.1)
),
tabPanel(h5("number"),
numericInput("n", "Number", value = 3)
)
)),
column(width = 8,
box(width = NULL, plotOutput("plot1",height="500px"), collapsible = TRUE,
title = "Plot", status = "primary", solidHeader = TRUE)
)),
#),
# tabItem(tabName = "table",
#         box( width = NULL, status = "primary", solidHeader = TRUE, title="Table",
#              downloadButton('downloadTable', 'Download'),
#              br(),br(),
#              tableOutput("table")
#         )
# ),
tabItem(tabName = "pkmodel",
box(width = NULL, status = "primary", solidHeader = TRUE, title="Edit",
editModUI("eview", width="100%", height="400px")
)
)
# tabItem(tabName = "ui",
#         box( width = NULL, status = "primary", solidHeader = TRUE, title="ui.R",
#              downloadButton('downloadData2', 'Download'),
#              br(),br(),
#              pre(includeText("ui.R"))
#         )
# ),
# tabItem(tabName = "server",
#         box( width = NULL, status = "primary", solidHeader = TRUE, title="server.R",
#              downloadButton('downloadData3', 'Download'),
#              br(),br(),
#              pre(includeText("server.R"))
#         )
# ),
# tabItem(tabName = "about",
#         includeMarkdown("../../about/about.Rmd")
# )
)
)
shiny::runApp()
runApp()
runApp()
